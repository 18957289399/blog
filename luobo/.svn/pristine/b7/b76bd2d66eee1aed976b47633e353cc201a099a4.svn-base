package me.huding.luobo;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.jfinal.kit.PathKit;

/**
 * 我们将所有相关的配置信息都放在一个配置文件里。通过类Parameters来统一访问。Parameters里通过java.util.
 * Properties读取配置文件，然后通过getPatameter()来获得配置信息。系统的各个全局变量也都放在这个类里面，静态共享。
 * 
 * @author xu
 * 
 */
public class Parameters {
	private final static Logger log = LoggerFactory.getLogger(Parameters.class);

	/** config file path */
	public static String CONFIG_PATH = PathKit.getWebRootPath()
			+ File.separator + "conf" + File.separator + "config.properties";

	/** 预览数据每页大小 */
	public static int PAGE_SIZE = 1000;

	public static String DB_DRIVER = getParameter("DB_DRIVER",
			"com.mysql.jdbc.Driver");
	
	public static String DB_USERNAME = getParameter("DB_USERNAME", "root");
	public static String DB_PASSWORD = getParameter("DB_PASSWORD", "root");
	public static String DB_URL = getParameter("DB_URL", "root");
	


	public static final int SUCCESS = 0;
	public static final int FAILURE = -1;

	private Parameters() {}

	public static Properties pro;

	/**
	 * get Object Propeties
	 * 
	 * @return
	 */
	public static Properties getPro() {
		log.debug(Parameters.CONFIG_PATH);
		InputStream inputStream = null;
		try {
			inputStream = new FileInputStream(new File(Parameters.CONFIG_PATH));
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}

		pro = new Properties();
		try {
			pro.load(inputStream);
		} catch (IOException e) {
			System.out.println("read config file error.");
			e.printStackTrace();
		}
		return pro;
	}

	/**
	 * get Parameter value by parameter name
	 * 
	 * @param parameterName
	 * @return
	 */
	public static String getParameter(String parameterName) {
		if (null == pro)
			Parameters.getPro();
		return pro.getProperty(parameterName);
	}

	/**
	 * get Parameter value by parameter name,if not configured return
	 * defaultValue
	 * 
	 * @param parameterName
	 * @param defaultValue
	 * @return
	 */
	public static String getParameter(String parameterName, String defaultValue) {
		if (null == pro)
			Parameters.getPro();
		return pro.getProperty(parameterName, defaultValue);
	}

	public static int getParameter(String parameterName, int defaultValue) {
		if (null == pro)
			Parameters.getPro();
		return Integer.parseInt(pro.getProperty(parameterName,
				String.valueOf(defaultValue)).trim());
	}
}
